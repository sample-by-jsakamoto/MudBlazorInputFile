@using MudBlazorInputFile.I18nText.App
@inject ISnackbar Snackbar
@inject Toolbelt.Blazor.I18nText.I18nText I18nText
<MudThemeProvider />
<MudSnackbarProvider />

<div>
    <MudAppBar Color="Color.Primary" Fixed="false">
        <h1>@Localize.Title</h1>
        <MudAppBarSpacer />
        <MudButton StartIcon="@Icons.Custom.GitHub" Link="https://github.com/sample-by-jsakamoto/MudBlazorInputFile/" Target="_blank" Color="Color.Inherit">
            @Localize.Source_Code
        </MudButton>
    </MudAppBar>
</div>

<div class="form-area">
    <MudPaper>
        <UploadAvatorPicture />
    </MudPaper>
</div>

<footer>
    <MudIcon Icon="@Icons.Material.Language" />
    <select @onchange="OnChangeCurrentLang">
        <option value="en" selected="@(CurrentLang == "en")">English</option>
        <option value="ja" selected="@(CurrentLang == "ja")">日本語</option>
    </select>
</footer>

@code {
    private Localize Localize = new Localize();

    private string CurrentLang;

    protected override async Task OnInitializedAsync()
    {
        var lang = await I18nText.GetCurrentLanguageAsync();
        if (new[] { "en", "ja" }.Contains(lang.Split('-')[0]))
        {
            CurrentLang = lang;
        }
        else
        {
            CurrentLang = "en";
        }

        this.Localize = await this.I18nText.GetTextTableAsync<Localize>(this);
        this.Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
    }

    private async Task OnChangeCurrentLang(ChangeEventArgs args)
    {
        CurrentLang = args.Value as string;
        await I18nText.SetCurrentLanguageAsync(CurrentLang);
    }
}
